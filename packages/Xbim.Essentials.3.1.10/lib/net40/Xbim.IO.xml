<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xbim.IO</name>
    </assembly>
    <members>
        <member name="T:Xbim.IO.DynamicGrouping.GroupingByXml">
            <summary>
            This class provides methods to perform the grouping of elements in the model.
            The resulting groups are populated in the model using IfcGroup and IFCRELASSIGNSTOGROUP;
            </summary>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.GroupingByXml.GroupElements(System.String,Xbim.Ifc2x3.Kernel.IfcGroup)">
            <summary>
            Performs the grouping of elements of the model according to the rules defined in the XML pointed by <paramref name="XMLfileName"/>
            </summary>
            <param name="XMLfileName">Name of the xml file defining the grouping rules.</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.GroupingByXml.PerformGrouping">
            <summary>
            Performs grouping based on the XML data provided.
            </summary>
            <param name="errLog">Stream for err output</param>
            <returns>True if grouping was successful. False otherwise.</returns>
        </member>
        <member name="T:Xbim.IO.DynamicGrouping.GroupsFromXml">
            <summary>
            Loads an IfcGroup hierarcy from an XML
            </summary>
        </member>
        <member name="T:Xbim.IO.DynamicGrouping.XbimQueryBuilder">
            <summary>
            Class for building dynamic query to get IFC instances which satisfy specified conditions.
            Type specified in the constructor is the target type. Use 'AddAttributeCondition' and
            'AddPropertyCondition' to specify conditions. Check LastError and ErrorLog for information
            about problems during building the query (even in case of failure).
            </summary>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryBuilder.#ctor(System.Type)">
            <summary>
            Constructor for query targeting specified type
            </summary>
            <param name="ifcType">Target type for query</param>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryBuilder.#ctor(System.String)">
            <summary>
            Constructor for query targeting specified type
            </summary>
            <param name="ifcTypeName">Target type for query (case insensitive)</param>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryBuilder.BuildQuery">
            <summary>
            Builds delegate function from inserted rules which is usable in IModel.Instances.Where(<b>delegate_expression</b>)
            </summary>
            <returns><b>delegate expression</b> for use in 'Where' function of IEnumerable</returns>
        </member>
        <member name="P:Xbim.IO.DynamicGrouping.XbimQueryBuilder.Type">
            <summary>
            Type for the querry
            </summary>
        </member>
        <member name="P:Xbim.IO.DynamicGrouping.XbimQueryBuilder.LastError">
            <summary>
            Last error in query builder
            </summary>
        </member>
        <member name="P:Xbim.IO.DynamicGrouping.XbimQueryBuilder.ErrorLog">
            <summary>
            Error log of querry creation
            </summary>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.PromoteToConstant(System.Type,System.String)">
            <summary>
            Creates constant expression with promoted value to the same type as the left type.
            It is necessary for some of the operations that the types on both sides are same.
            If it is not possible to convert left argument null is returned in release compilation
            or exception is thrown in debug mode.
            </summary>
            <param name="leftType">Target type of the parameter</param>
            <returns>Expression how to handle input constant value to make it comparable with the type</returns>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.PromoteToEnumeration(System.Type,System.String)">
            <summary>
            Promote string input value to the enumeration value
            </summary>
            <param name="type">Enumeration type</param>
            <param name="value">String input value</param>
            <returns></returns>
        </member>
        <member name="F:Xbim.IO.DynamicGrouping.XbimQueryFactory.numericTypes">
            <summary>
            List of numeric types to use appropriate parsing function
            </summary>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.GenerateContains(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates 'Contains' expression for types inheriting from IEnumerable (like string, list, ...) and specific IFC types
            </summary>
            <param name="left">Left expression</param>
            <param name="right">Right expression</param>
            <returns>Expression with 'bool' type as result of binary expression</returns>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.UnwrapExpressType(System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)">
            Unwraps ExpressType in the expression so that value is being accessed directly 
            and standard methods are than applicable on them. If EspressType is wrapped in 
            Nullable&lt;ExpressType&gt; generic function new Nullable instance is created and ExpressType core 
            value is used in this new object so that its behavior is the same as if just the 
            base types were used. If input is not ExpressType or Nullable&lt;ExpressType&gt;
            nothing happens.
            This overloaded method is helper for the case when both sides of binary operation
            are to be unwrapped at one step. Left and right types should be the same.
            <param name="left">Left expression</param>
            <param name="right">Right expression</param>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.UnwrapExpressType(System.Linq.Expressions.Expression)">
            <summary>
            Unwraps ExpressType in the expression so that value is being accessed directly 
            and standard methods are than applicable on them. If EspressType is wrapped in 
            Nullable&lt;ExpressType&gt; generic function new Nullable instance is created and ExpressType core 
            value is used in this new object so that its behavior is the same as if just the 
            base types were used. If input is not ExpressType or Nullable&lt;ExpressType&gt;
            nothing happens.
            </summary>
            <param name="expression">Expression to be unwrapped</param>
            <returns>Unwrapped expression</returns>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.WrapToNullable(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Helper function to wrap expression value to the nullable. It is used from 'UnwrapExpressType'
            to keep the concept of possibly undefined value.
            </summary>
            <param name="expObj">Input expression</param>
            <param name="baseType">Base type</param>
            <returns>Nullable wrapped expression</returns>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.IsNullableType(System.Type)">
            <summary>
            Checking if the type is nullable type
            </summary>
            <param name="type">Type to check</param>
            <returns>True if the type is nullable, false otherwise</returns>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.ParseEnum(System.String,System.Type)">
            <summary>
            Function for parsing enumeration values (case insensitive)
            </summary>
            <param name="name">Name of the enumeration value</param>
            <param name="type">Type of the enumeration</param>
            <returns>Enumeration value usable for comparison</returns>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.ParseNumber(System.String,System.Type)">
            <summary>
            Parsing of the string value to the numeric value.
            </summary>
            <param name="text">String representing numeric value</param>
            <param name="type">Target type</param>
            <returns>Numeric value of specified type or NULL if parsing was not successful</returns>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.GenerateEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates 'equal' expression
            </summary>
            <param name="left">left expression operand</param>
            <param name="right">right expression operand</param>
            <returns>Equality expression</returns>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.GenerateNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates 'not-equal' expression
            </summary>
            <param name="left">left expression operand</param>
            <param name="right">right expression operand</param>
            <returns>Non equality expression</returns>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.GenerateGreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates 'greater than' expression. 
            Function call method is applied on string type of operand 
            instead of standard expression function.
            </summary>
            <param name="left">left expression operand</param>
            <param name="right">right expression operand</param>
            <returns>Greater than expression</returns>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.GetNonNullableType(System.Type)">
            <summary>
            Gets non-nullable type underlying the generic nullable type
            </summary>
            <param name="type">Nullable type</param>
            <returns>Non-nullable type</returns>
        </member>
        <member name="M:Xbim.IO.DynamicGrouping.XbimQueryFactory.IsCompatibleWith(System.Type,System.Type)">
            <summary>
            Checks compatibility of numeric types
            </summary>
            <param name="source">Source type to check</param>
            <param name="target">Target type to check</param>
            <returns>TRUE if types are compatible, FALSE otherwise</returns>
        </member>
        <member name="T:Xbim.IO.GroupingAndStyling.IGeomHandlesGrouping">
            <summary>
            Defines a method to organise a collection of geometry handles in subgroups 
            </summary>
        </member>
        <member name="M:Xbim.IO.GroupingAndStyling.IGeomHandlesGrouping.GroupLayers(Xbim.IO.XbimGeometryHandleCollection)">
            <summary>
            Analyses the handles and returns them in groups that are organised by string keys.
            </summary>
            <param name="handles">The handles to be organised</param>
            <returns>A dictionary that will later be enumerated by key to retrieve the style</returns>
        </member>
        <member name="T:Xbim.IO.GroupingAndStyling.TypeAndStyle">
            <summary>
            Organises the inputhandles per type
            </summary>
        </member>
        <member name="M:Xbim.IO.IfcRepresentationItemExtensions.SurfaceStyle(Xbim.Ifc2x3.GeometryResource.IfcRepresentationItem)">
            <summary>
            Returns the first IfcSurfaceStyle associated with the representation item
            </summary>
            <param name="repItem"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IXbimGeometryCreator.CreateShapeGeometry(XbimGeometry.Interfaces.IXbimGeometryObject,System.Double,System.Double,System.Double,XbimGeometry.Interfaces.XbimGeometryType)">
            <summary>
            
            </summary>
            <param name="geometryObject"></param>
            <param name="precision">the distance at which two points are considered to be the same</param>
            <param name="deflection">the max distance between the chord of a curve and the line segment of a faceted edge </param>
            <param name="angle">Defaults to 0.5</param>
            <param name="storageType">Defaults to Polyhedron in compressed text format</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IXbimGeometryCreator.CreateShapeGeometry(XbimGeometry.Interfaces.IXbimGeometryObject,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="geometryObject"></param>
            <param name="precision">the distance at which two points are considered to be the same</param>
            <param name="deflection">the max distance between the chord of a curve and the line segment of a faceted edge </param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IXbimRepository.Open(System.String,Xbim.XbimExtensions.XbimDBAccess,Xbim.XbimExtensions.Interfaces.ReportProgressDelegate)">
            <summary>
            Opens the repository, throws an error if open fails
            </summary>
            <param name="connectionString"></param>
            <param name="accessMode"></param>
            <param name="progDelegate"></param>
        </member>
        <member name="M:Xbim.IO.IXbimRepository.Close">
            <summary>
            Closes the repository if open, if the repository is closed already no action is taken and no error is thrown
            </summary>
        </member>
        <member name="M:Xbim.IO.IXbimRepository.Delete(System.String)">
            <summary>
                Deletes the repository, an error is thrown if this fails, if no repository exists no error is thrown
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:Xbim.IO.IXbimRepository.Create(System.String)">
            <summary>
            Creates a new repository, the resulting repository is open for read / write operations
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:Xbim.IO.IXbimRepository.Insert(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity)">
            <summary>
                Creates a new container for the entity, If the entity label is >0 an attampt is made to use this label, if the
                label exists an exceotion is thrown
                If the label is 0 it is replaced by the label of the new container and returned from the function
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IXbimRepository.Update(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity)">
            <summary>
            Updates the repository to the latest state of the entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Xbim.IO.IXbimRepository.Retrieve(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity@,System.Int32)">
            <summary>
            Retrieves and populates the properties of the entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Xbim.IO.IXbimRepository.GetEntityType(System.Int32)">
            <summary>
            Gets the IfcType of the entity
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.IXbimShapeBounds.InstanceLabel">
            <summary>
            The unique label of this shape instance
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeBounds.IfcTypeId">
            <summary>
            The IFC type of the product this instance represents
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeBounds.IfcProductLabel">
            <summary>
            The label of the IFC Product object that  this instance fully or partly defines
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeBounds.StyleLabel">
            <summary>
            The style that this shape is presented in when it overrides the shape style
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeBounds.ShapeLabel">
            <summary>
            The id of the shape geometry  that this is an instance of
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeBounds.Transformation">
            <summary>
            The transformation to be applied to shape to place it in the world coordinates
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeBounds.BoundingBox">
            <summary>
            The bounding box of this instance in world coordinates, it has been transformed to the correct location
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeBounds.Cost">
            <summary>
            The cost of this shape in bytes
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeBounds.ReferenceCount">
            <summary>
            The number of references to this shape
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeGeometryData.ShapeLabel">
            <summary>
            The unique label of this shape instance
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeGeometryData.IfcShapeLabel">
            <summary>
            The label of the IFC object that defines this shape
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeGeometryData.GeometryHash">
            <summary>
             Hash of the shape Geometry, based on the IFC representation, this is not unique
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeGeometryData.Cost">
            <summary>
            The cost of this shape in bytes
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeGeometryData.ReferenceCount">
            <summary>
            The number of references to this shape
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeGeometryData.LOD">
            <summary>
            The level of detail or development that the shape is suited for
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeGeometryData.Format">
            <summary>
            The format in which the shape data is represented, i.e. triangular mesh, polygon, opencascade
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeGeometryData.BoundingBox">
            <summary>
            The bounding box of this instance in world coordinates, it has been transformed to the correct location
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeGeometryData.ShapeDataCompressed">
            <summary>
            The geometry data defining the shape in zip compression
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeGeometryData.ShapeData">
            <summary>
            The geometry data defining the shape in  uncompressed format
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeInstanceData.InstanceLabel">
            <summary>
            The unique label of this shape instance
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeInstanceData.IfcTypeId">
            <summary>
            The IFC type of the product this instance represents
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeInstanceData.IfcProductLabel">
            <summary>
            The label of the IFC Product object that  this instance fully or partly defines
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeInstanceData.StyleLabel">
            <summary>
            The style that this shape is presented in when it overrides the shape style
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeInstanceData.ShapeGeometryLabel">
            <summary>
            The id of the shape geometry  that this is an instance of
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeInstanceData.RepresentationContext">
            <summary>
            The label of the IFC representation context of this instance
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeInstanceData.RepresentationType">
            <summary>
            What type of representation, typically this is how the shape has been generated, i.e. openings have been applied or not applied
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeInstanceData.Transformation">
            <summary>
            The transformation to be applied to shape to place it in the world coordinates
            </summary>
        </member>
        <member name="P:Xbim.IO.IXbimShapeInstanceData.BoundingBox">
            <summary>
            The bounding box of this instance, does not require tranformation to place in world coordinates
            </summary>
        </member>
        <member name="M:Xbim.IO.Tree.TreeComponentStrategy.GetComponentStructure">
            <summary>
            Groups all elements by their Family Type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Tree.TreeContainmentStrategy.GetContainmentStructure">
            <summary>
            Creates a Hierarchical structure reflecting the containment structure of the model.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xbim.IO.Tree.FamilyNode">
            <summary>
            Defines a Family of Elements. e.g IfcRoof
            </summary>
        </member>
        <member name="T:Xbim.IO.Tree.CompositionNode">
            <summary>
            Defines a Container Structure of Elements. i.e Decomposition of Site - Building - Floor etc
            </summary>
        </member>
        <member name="T:Xbim.IO.Tree.ElementNode">
            <summary>
            Defines a element Instance. Always a leaf
            </summary>
        </member>
        <member name="T:Xbim.IO.ViewModels.XbimModelViewModel">
            <summary>
            Model view for display top level Xbim Model contents and referenced models
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimFederatedModelInstances.GetFromGeometryLabel(System.Int32)">
            <summary>
            returns the geometry from the local instances
            Does not access federated model geometry
            </summary>
            <param name="geometryLabel"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.XbimFederatedModelInstances.Item(System.Int32)">
            <summary>
            returns the local instance with the given label
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.XbimFederatedModelInstances.Item(Xbim.IO.XbimInstanceHandle)">
            <summary>
            Returns the instance that corresponds to this handle
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="F:Xbim.IO.XbimGeometryHandle.GeometryLabel">
            <summary>
            The unique ID of the geometry
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimGeometryHandle.SurfaceStyleLabel">
            <summary>
            The label of the Ifc Entity that holds the surface style render
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimGeometryHandle.ProductLabel">
            <summary>
            The label of the Ifc Entity that the geomtry represents
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimGeometryHandle.IfcTypeId">
            <summary>
            The id of the Ifc Type of the Product represented
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimGeometryHandle.GeometryType">
            <summary>
            The type of geometric representation
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimGeometryHandle.GeometryHashCode">
            <summary>
            The hash code of the geometry vertex data
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimGeometryHandle.#ctor(System.Int32,XbimGeometry.Interfaces.XbimGeometryType,System.Int32,System.Int16,System.Int32,System.Nullable{System.Int32})">
            <summary>
            A handle to a geometry object
            </summary>
            <param name="geometryLabel">The unique ID of the geometry</param>
            <param name="geometryType">The type of geometric representation</param>
            <param name="productLabel">The label of the Ifc Entity that the geomtry represents</param>
            <param name="ifcTypeId">The id of the Ifc Type of the Product represented</param>
            <param name="surfaceStyleLabel">The label of the Ifc Entity that holds the surface style render</param>
            <param name="geometryHashCode"></param>
        </member>
        <member name="P:Xbim.IO.XbimGeometryHandle.SurfaceStyle">
            <summary>
            Returns the surface style for rendering this object
            </summary>
        </member>
        <member name="T:Xbim.IO.XbimGeometryHandleCollection">
            <summary>
            An ordered Collection of geometry handles
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimGeometryHandleCollection.GetSurfaceStyles">
            <summary>
            Returns a list of unique surface style for this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimGeometryHandleCollection.Exclude(Xbim.Ifc2x3.IfcEntityNameEnum[])">
            <summary>
            Returns all handles that are not of type to exclude
            </summary>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimGeometryHandleCollection.Include(Xbim.Ifc2x3.IfcEntityNameEnum[])">
            <summary>
            returns all handles that of of type to include
            </summary>
            <param name="include"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimGeometryHandleCollection.GetGeometryHandles(Xbim.IO.XbimSurfaceStyle)">
            <summary>
            Returns all the Geometry Handles for a specified SurfaceStyle
            Obtain the SurfaceStyle by calling the GetSurfaceStyles function
            </summary>
            <param name="forStyle"></param>
        </member>
        <member name="M:Xbim.IO.XbimGeometryHandleCollection.ToSurfaceStyleMap">
            <summary>
            Returns a map of all the unique surface style and the geometry objects that the style renders
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xbim.IO.XbimInstanceCollection">
            <summary>
            A class providing access to a collection of in,stances in a model
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimInstanceCollection.CountOf``1">
            <summary>
            Returns the count of the number of instances of the specified type
            </summary>
            <typeparam name="TIfcType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimInstanceCollection.OfType``1(System.Boolean)">
            <summary>
            Returns all instances in the model of IfcType, IfcType may be an abstract Type
            </summary>
            <param name="activate">if true each instance is fullly populated from the database, if false population is deferred until the entity is activated</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimInstanceCollection.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
              Filters the Ifc Instances based on their Type and the predicate
            </summary>
            <typeparam name = "TIfcType">Ifc Type to filter</typeparam>
            <param name = "expression">function to execute</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimInstanceCollection.Handles">
            <summary>
            Returns an enumerabale of all the instance handles in the model
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimInstanceCollection.Handles``1">
            <summary>
            Returns an enumerable of all handles of the specified type in the model
            </summary>
            <typeparam name="T">The type of entity required</typeparam>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimInstanceCollection.GetFromGeometryLabel(System.Int32)">
            <summary>
            Returns the Ifc entity for a given Geometry Label
            </summary>
            <param name="geometryLabel"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimInstanceCollection.New``1">
            <summary>
              Creates a new Ifc Persistent Instance, this is an undoable operation
            </summary>
            <typeparam name = "TIfcType"> The Ifc Type, this cannot be an abstract class. An exception will be thrown if the type is not a valid Ifc Type  </typeparam>
        </member>
        <member name="M:Xbim.IO.XbimInstanceCollection.New``1(Xbim.XbimExtensions.Interfaces.InitProperties{``0})">
            <summary>
              Creates and Instance of TIfcType and initializes the properties in accordance with the lambda expression
              i.e. Person person = CreateInstance&gt;Person&lt;(p =&lt; { p.FamilyName = "Undefined"; p.GivenName = "Joe"; });
            </summary>
            <typeparam name = "TIfcType"></typeparam>
            <param name = "initPropertiesFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimInstanceCollection.New(System.Type)">
            <summary>
            Creates and returns a new instance of Type t, sets the label to the specificed value.
            This is a reversabel operation
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimInstanceCollection.Contains(System.Int32)">
            <summary>
            Returns true if the instance label is in the current model, 
            Use with care, does not check that the instance is in the current model, only the label exists
            </summary>
            <param name="entityLabel"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimInstanceCollection.Contains(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity)">
            <summary>
            Returns true if the instance is in the current model
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.XbimInstanceCollection.Count">
            <summary>
            Returns the total number of Ifc Instances in this model
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimInstanceCollection.Item(System.Int32)">
            <summary>
            Returns an instance from the Model with the corresponding label
            </summary>
            <param name="label">entity label to retrieve</param>
            <returns></returns>
        </member>
        <member name="T:Xbim.IO.XbimInstanceHandle">
            <summary>
            A lightweight structure for obtaining a handle to an Ifc Instance, the instance is not loaded into memory unless the GetInstance function is called
            IfcInstanceHandle are specific to the model they were generated from
            </summary>
        </member>
        <member name="T:Xbim.IO.IfcMetaData">
            <summary>
              A collection of IPersistIfcEntity instances, optimised for IFC models
            </summary>
        </member>
        <member name="F:Xbim.IO.IfcMetaData.TypeIdToTypeNameLookup">
            <summary>
            Look up the numeric id of an Ifc Entity and return the string name in upper case
            </summary>
        </member>
        <member name="F:Xbim.IO.IfcMetaData.TypeIdToIfcTypeLookup">
            <summary>
            Look up for the if of an Ifc entity that returns the IfcType
            </summary>
        </member>
        <member name="F:Xbim.IO.IfcMetaData.TypeToIfcTypeLookup">
            <summary>
            Look up the entity Type and return the IfcType
            </summary>
        </member>
        <member name="F:Xbim.IO.IfcMetaData.TypeNameToIfcTypeLookup">
            <summary>
            Look up the name of an ifc entity and return the IfcType
            </summary>
        </member>
        <member name="F:Xbim.IO.IfcMetaData.InterfaceToIfcTypesLookup">
            <summary>
            Look up IfcTypes implementing an interface
            </summary>
        </member>
        <member name="M:Xbim.IO.IfcMetaData.IfcType(System.String)">
            <summary>
            Returns the IfcType with the specified name
            </summary>
            <param name="typeName">The name of the type in uppercase</param>
            <returns>The foud type (or Null if not found)</returns>
        </member>
        <member name="M:Xbim.IO.IfcMetaData.IfcType(System.Type)">
            <summary>
            Returns the IfcType with the specified type
            </summary>
            <param name="type">The type</param>
            <returns>The foud type (or Null if not found)</returns>
        </member>
        <member name="M:Xbim.IO.IfcMetaData.IfcType(System.Int16)">
            <summary>
            returns the IfcType corresponding to the TypeId
            </summary>
            <param name="typeId"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcMetaData.IfcTypeId(System.Type)">
            <summary>
            returns the ifc type id of the type, if the type is not an ifc entity and excpetion will be thrown
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcMetaData.IfcTypeId(System.String)">
            <summary>
            Returns the ifc typeId for the named type
            </summary>
            <param name="typeName">the name of the type, this is in uppercase</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcMetaData.GetType(System.Int16)">
            <summary>
            Returns the Type of the Ifc Entity with typeId
            </summary>
            <param name="typeId"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcMetaData.IfcType(Xbim.XbimExtensions.Interfaces.IPersistIfc)">
            <summary>
            Returns the IfcType of the specified entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcMetaData.TryGetIfcType(System.String,Xbim.IO.IfcType@)">
            <summary>
            Trys to get the specified Ifc Type with the typeName, if the ifcType does not exist false is returned
            </summary>
            <param name="typeName"></param>
            <param name="ifcType"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcMetaData.IsIndexedIfcAttribute(System.String,System.Int32)">
            <summary>
            Returns true if the named entities attribute is indexed
            </summary>
            <param name="entityTypeName">the name of the Ifc Entity</param>
            <param name="attributeIndex">the index offset of the attribute to check, nb this is a 1 based index</param>
            <returns></returns>
        </member>
        <member name="F:Xbim.IO.IfcPersistedInstanceCache.openInstances">
            <summary>
            Holds a collection of all currently opened instances in this process
            </summary>
        </member>
        <member name="F:Xbim.IO.IfcPersistedInstanceCache._lockObject">
            <summary>
            Holds the session and transaction state
            </summary>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.CreateDatabase(System.String)">
            <summary>
            Creates an empty xbim file, overwrites any existing file of the same name
            throw a create failed exception if unsuccessful
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.GetEntityTable">
            <summary>
            Returns a cached or new entity table, assumes the database filename has been specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.GetGeometryTable">
            <summary>
            Returns a cached or new Geometry Table, assumes the database filename has been specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.FreeTable(Xbim.IO.XbimEntityCursor)">
            <summary>
            Free a table. This will cache the table if the cache isn't full
            and dispose of it otherwise.
            </summary>
            <param name="table">The cursor to free.</param>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.FreeTable(Xbim.IO.XbimGeometryCursor)">
            <summary>
            Free a table. This will cache the table if the cache isn't full
            and dispose of it otherwise.
            </summary>
            <param name="table">The cursor to free.</param>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.FreeTable(Xbim.IO.XbimShapeGeometryCursor)">
            <summary>
            Free a table. This will cache the table if the cache isn't full
            and dispose of it otherwise.
            </summary>
            <param name="table">The cursor to free.</param>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.FreeTable(Xbim.IO.XbimShapeInstanceCursor)">
            <summary>
            Free a table. This will cache the table if the cache isn't full
            and dispose of it otherwise.
            </summary>
            <param name="table">The cursor to free.</param>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.Open(System.String,Xbim.XbimExtensions.XbimDBAccess)">
            <summary>
             Opens an xbim model server file, exception is thrown if errors are encountered
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.Close">
            <summary>
            Clears all contents from the cache and closes any connections
            </summary>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs a set of actions on a collection of entities inside a single read only transaction
            This improves database  performance for retrieving and accessing complex and deep objects
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="body"></param>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.ImportIfc(System.String,System.String,Xbim.XbimExtensions.Interfaces.ReportProgressDelegate,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Imports the contents of the ifc file into the named database, the resulting database is closed after success, use Open to access
            </summary>
            <param name="progressHandler"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.ImportIfcZip(System.String,System.String,Xbim.XbimExtensions.Interfaces.ReportProgressDelegate,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Imports an Ifc Zip file
            </summary>
            <param name="toImportFilename"></param>
            <param name="progressHandler"></param>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.GetXbimTempDirectory">
            <summary>
            Sets up the Esent directories, can only be call before the Init method of the instance
            </summary>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.IsValidDirectory(System.String@)">
            <summary>
            Checks the directory is writeable and modifies to be the full path
            </summary>
            <param name="tempDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.ImportIfcXml(System.String,System.String,Xbim.XbimExtensions.Interfaces.ReportProgressDelegate,System.Boolean,System.Boolean)">
            <summary>
              Imports an Xml file memory model into the model server, only call when the database instances table is empty
            </summary>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.CountOf``1">
            <summary>
            returns the number of instances of the specified type and its sub types
            </summary>
            <typeparam name="TIfcType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.CountOf(System.Type)">
            <summary>
            returns the number of instances of the specified type and its sub types
            </summary>
            <param name="theType"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.CreateNew(System.Type)">
            <summary>
            Creates a new instance
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.CreateNew(System.Type,System.Int32)">
            <summary>
            Creates a new instance, this is not a reversable action, and the instance is not cached
            It is for performance in import and export routines and should not be used in normal code
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.InstancesOfTypeCount(System.Type)">
            <summary>
            Deprecated. Use CountOf, returns the number of instances of the specified type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.InstanceHandlesOfType``1">
            <summary>
            Returns an enumeration of handles to all instances in the database or the cache of specified type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.GetInstance(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns an instance of the entity with the specified label,
            if the instance has already been loaded it is returned from the cache
            if it has not been loaded a blank instance is loaded, i.e. will not have been activated
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.GetOrCreateInstanceFromCache(System.Int32,System.Type,System.Byte[])">
            <summary>
            Looks for this instance in the cache and returns it, if not found it creates a new instance and adds it to the cache
            </summary>
            <param name="label">Entity label to create</param>
            <param name="type">If not null creates an instance of this type, else creates an unknown Ifc Type</param>
            <param name="properties">if not null populates all properties of the instance</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.GetInstanceFromStore(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Loads a blank instance from the database, do not call this before checking that the instance is in the instances cache
            If the entity has already been cached it will throw an exception
            This is not a undoable/reversable operation
            </summary>
            <param name="entityLabel">Must be a positive value of the label</param>
            <param name="loadProperties">if true the properties of the object are loaded  at the same time</param>
            <param name="unCached">if true the object is not cached, this is dangerous and can lead to object duplicates</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.OfType``1(System.Boolean,System.Nullable{System.Int32},Xbim.IO.IfcType)">
            <summary>
            Enumerates of all instances of the specified type. The values are cached, if activate is true all the properties of the entity are loaded
            </summary>
            <typeparam name="TIfcType"></typeparam>
            <param name="activate">if true loads the properties of the entity</param>
            <param name="indexKey">if the entity has a key object, optimises to search for this handle</param>
            <param name="overrideType">if specified this parameter overrides the ifcType used internally (but not TIfcType) for filtering purposes</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.GetEntityBinaryData(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity)">
            <summary>
            Gets the entities propertyData on binary stream
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.GetGeometryData(XbimGeometry.Interfaces.XbimGeometryType)">
            <summary>
            Iterates over all the shape geoemtry
            This is a thread safe operation and can be accessed in background threads
            </summary>
            <param name="ofType"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.InsertNew(System.Type)">
            <summary>
            This function can only be called once the model is in a transaction
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.InsertNew(System.Type,System.Int32)">
            <summary>
            This function can only be called once the model is in a transaction
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.AddModified(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity)">
            <summary>
            Adds an entity to the modified cache, if the entity is not already being edited
            Throws an exception if an attempt is made to edit a duplicate reference to the entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.BeginCaching">
            <summary>
            Clears any cached objects and starts a new caching session
            </summary>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.EndCaching">
            <summary>
            Clears any cached objects and terminates further caching
            </summary>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.Write(Xbim.IO.XbimEntityCursor)">
            <summary>
            Writes the content of the modified cache to the table, assumes a transaction is in scope, modified and createnew caches are cleared
            </summary>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.CacheStart">
            <summary>
            Starts a read cache
            </summary>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.CacheClear">
            <summary>
            Clears a read cache, do not call when a transaction is active
            </summary>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.CacheStop">
            <summary>
            Clears a read cache, and ends further caching, do not call when a transaction is active
            </summary>
        </member>
        <member name="M:Xbim.IO.IfcPersistedInstanceCache.DeleteGeometry">
            <summary>
            Deletes the geometric content of the model.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="P:Xbim.IO.IfcPersistedInstanceCache.Count">
            <summary>
            returns the number of instances in the model
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.IfcPersistedInstanceCache.HighestLabel">
            <summary>
            returns the value of the highest current entity label
            </summary>
        </member>
        <member name="P:Xbim.IO.IfcPersistedInstanceCache.InstanceHandles">
            <summary>
            Returns an enumeration of handles to all instances in the database and in the cache
            </summary>
        </member>
        <member name="P:Xbim.IO.IfcPersistedInstanceCache.InstanceLabels">
            <summary>
            Returns an enumeration of all the instance labels in the model
            </summary>
        </member>
        <member name="M:Xbim.IO.IfcType.GetIndexedValues(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity)">
            <summary>
            If the type has indexed attributes, this returns a set of unique values for the specified IPersistIfcEntity
            </summary>
            <param name="ent"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IfcType.IsIndexedIfcAttribute(System.Int32)">
            <summary>
            returns true if the attribute is indexed
            </summary>
            <param name="attributeIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.IfcType.HasIndexedAttribute">
            <summary>
            Returns true if the type has an indexed attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IPersistIfcEntityExtensions.IfcTypeId(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity)">
            <summary>
            Returns the index value of this type for use in Xbim database storage
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IPersistIfcEntityExtensions.IfcType(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity)">
            <summary>
            Returns the Xbim meta data about the Ifc Properties of the Type
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.IPersistIfcEntityExtensions.WriteEntity(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity,System.IO.TextWriter,System.Collections.Generic.IDictionary{System.Int32,System.Int32})">
            <summary>
            Writes the entity to a TextWriter in the Part21 format
            </summary>
            <param name="entityWriter">The TextWriter</param>
            <param name="entity">The entity to write</param>
        </member>
        <member name="M:Xbim.IO.IPersistIfcEntityExtensions.WriteProperty(System.Type,System.Object,System.IO.TextWriter,System.Collections.Generic.IDictionary{System.Int32,System.Int32})">
            <summary>
            Writes a property of an entity to the TextWriter in the Part21 format
            </summary>
            <param name="propType"></param>
            <param name="propVal"></param>
            <param name="entityWriter"></param>
        </member>
        <member name="M:Xbim.IO.IPersistIfcEntityExtensions.WriteValueType(System.Type,System.Object,System.IO.TextWriter)">
            <summary>
            Writes the value of a property to the TextWriter in the Part 21 format
            </summary>
            <param name="pInfoType"></param>
            <param name="pVal"></param>
            <param name="entityWriter"></param>
        </member>
        <member name="M:Xbim.IO.IPersistIfcEntityExtensions.WriteEntityToSteam(System.IO.MemoryStream,System.IO.BinaryWriter,Xbim.XbimExtensions.Interfaces.IPersistIfcEntity)">
            <summary>
              Writes the in memory data of the entity to a stream
            </summary>
            <param name = "entityStream"></param>
            <param name = "entityWriter"></param>
            <param name = "item"></param>
        </member>
        <member name="M:Xbim.IO.IPersistIfcEntityExtensions.ReadEntityProperties(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity,Xbim.IO.IfcPersistedInstanceCache,System.IO.BinaryReader,System.Boolean,System.Boolean)">
            <summary>
            Populates an entites properties from the binary stream
            </summary>
            <param name="entity"></param>
            <param name="cache"></param>
            <param name="br"></param>
            <param name="unCached">If true instances inside the properties are not added to the cache</param>
            <param name="fromCache"> If true the instance is read from the cache if not present it is created, used during parsing</param>
        </member>
        <member name="P:Xbim.IO.Parser.PropertyValue.NumberVal">
            <summary>
              Returns a double if the type parsed is any kind of number
            </summary>
        </member>
        <member name="T:QUT.Gppg.ShiftReduceParser`2">
            <summary>
              Abstract class for GPPG shift-reduce parsers.
              Parsers generated by GPPG derive from this base
              class, overriding the abstract Initialize() and
              DoAction() methods.
            </summary>
            <typeparam name = "TValue">Semantic value type</typeparam>
            <typeparam name = "TSpan">Location type</typeparam>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.#ctor(QUT.Gppg.AbstractScanner{`0,`1})">
            <summary>
              Constructor for base class
            </summary>
            <param name = "scanner">Scanner instance for this parser</param>
        </member>
        <member name="F:QUT.Gppg.ShiftReduceParser`2.CurrentSemanticValue">
            <summary>
              The current value of the "$$" symbolic variable in the parser
            </summary>
        </member>
        <member name="F:QUT.Gppg.ShiftReduceParser`2.CurrentLocationSpan">
            <summary>
              The current value of the "@$" symbolic variable in the parser
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitRules(QUT.Gppg.Rule[])">
            <summary>
              Initialization method to allow derived classes
              to insert the rule list into this base class.
            </summary>
            <param name = "rules">The array of Rule objects</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitSpecialTokens(System.Int32,System.Int32)">
            <summary>
              Initialization method to allow derived classes
              to insert the special value for the error and EOF tokens.
            </summary>
            <param name = "err">The error state ordinal</param>
            <param name = "end">The EOF stat ordinal</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitStateTable(System.Int32)">
            <summary>
              Initialization method to allow derived classes 
              to allocate the state table in this base class.
            </summary>
            <param name = "size">The number of states</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitNonTerminals(System.String[])">
            <summary>
              Initialization method to allow derived classes to
              insert the non-terminal symbol names into this base class.
            </summary>
            <param name = "names">Non-terminal symbol names</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.YYAccept">
            <summary>
              Force parser to terminate, returning "true"
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.YYAbort">
            <summary>
              Force parser to terminate, returning "false"
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.YYError">
            <summary>
              Force parser to terminate, returning
              "false" if error recovery fails.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.Initialize">
            <summary>
              Abstract base method. ShiftReduceParser calls this
              to initialize the base class data structures.  Concrete
              parser classes must override this method.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.Parse">
            <summary>
              Main entry point of the Shift-Reduce Parser.
            </summary>
            <returns>True if parse succeeds, else false for
              unrecoverable errors</returns>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.DoAction(System.Int32)">
            <summary>
              Execute the selected action from array.
              Must be overriden in derived classes.
            </summary>
            <param name = "actionNumber">Index of the action to perform</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.yyclearin">
            <summary>
              Traditional YACC method.  Discards the next input token.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.yyerrok">
            <summary>
              Tradional YACC method. Clear the "recovering" flag.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.AddState(System.Int32,QUT.Gppg.State)">
            <summary>
              Method used by derived types to insert new
              state instances in the "states" array.
            </summary>
            <param name = "stateNumber">index of the state</param>
            <param name = "state">data for the state</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.TerminalToString(System.Int32)">
            <summary>
              Abstract state class naming terminal symbols.
              This is overridden by derived classes with the
              name (or alias) to be used in error messages.
            </summary>
            <param name = "terminal">The terminal ordinal</param>
            <returns></returns>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.CharToString(System.Char)">
            <summary>
              Return text representation of argument character
            </summary>
            <param name = "input">The character to convert</param>
            <returns>String representation of the character</returns>
        </member>
        <member name="P:QUT.Gppg.ShiftReduceParser`2.Scanner">
            <summary>
              The abstract scanner for this parser.
            </summary>
        </member>
        <member name="P:QUT.Gppg.ShiftReduceParser`2.ValueStack">
            <summary>
              The stack of semantic value (YYSTYPE) values.
            </summary>
        </member>
        <member name="P:QUT.Gppg.ShiftReduceParser`2.LocationStack">
            <summary>
              The stack of location value (YYLTYPE) varlues.
            </summary>
        </member>
        <member name="P:QUT.Gppg.ShiftReduceParser`2.YYRecovering">
            <summary>
              Check if parser in error recovery state.
            </summary>
        </member>
        <member name="T:QUT.Gppg.AbstractScanner`2">
            <summary>
              Abstract scanner class that GPPG expects its scanners to 
              extend.
            </summary>
            <typeparam name = "TValue">Semantic value type YYSTYPE</typeparam>
            <typeparam name = "TSpan">Source location type YYLTYPE</typeparam>
        </member>
        <member name="F:QUT.Gppg.AbstractScanner`2.yylval">
            <summary>
              Lexical value optionally set by the scanner. The value
              is of the %YYSTYPE type declared in the parser spec.
            </summary>
        </member>
        <member name="M:QUT.Gppg.AbstractScanner`2.yylex">
            <summary>
              Main call point for LEX-like scanners.  Returns an int
              corresponding to the token recognized by the scanner.
            </summary>
            <returns>An int corresponding to the token</returns>
        </member>
        <member name="M:QUT.Gppg.AbstractScanner`2.yyerror(System.String,System.Object[])">
            <summary>
              Traditional error reporting provided by LEX-like scanners
              to their YACC-like clients.
            </summary>
            <param name = "format">Message format string</param>
            <param name = "args">Optional array of args</param>
        </member>
        <member name="P:QUT.Gppg.AbstractScanner`2.yylloc">
            <summary>
              Current scanner location property. The value is of the
              type declared by %YYLTYPE in the parser specification.
            </summary>
        </member>
        <member name="M:Xbim.IO.Parser.Scanner.MkBuffCtx">
            <summary>
              This method creates a buffer context record from
              the current buffer object, together with some
              scanner state values.
            </summary>
        </member>
        <member name="M:Xbim.IO.Parser.Scanner.RestoreBuffCtx(Xbim.IO.Parser.Scanner.BufferContext)">
            <summary>
              This method restores the buffer value and allied
              scanner state from the given context record value.
            </summary>
        </member>
        <member name="M:Xbim.IO.Parser.Scanner.SetSource(System.String,System.Int32)">
            <summary>
              Create and initialize a StringBuff buffer object for this scanner
            </summary>
            <param name = "source">the input string</param>
            <param name = "offset">starting offset in the string</param>
        </member>
        <member name="M:Xbim.IO.Parser.Scanner.SetSource(System.Collections.Generic.IList{System.String})">
            <summary>
              Create and initialize a LineBuff buffer object for this scanner
            </summary>
            <param name = "source">the list of input strings</param>
        </member>
        <member name="M:Xbim.IO.Parser.Scanner.SetSource(System.IO.Stream)">
            <summary>
              Create and initialize a StreamBuff buffer object for this scanner.
              StreamBuff is buffer for 8-bit byte files.
            </summary>
            <param name = "source">the input byte stream</param>
        </member>
        <member name="P:Xbim.IO.Parser.Scanner.Buffer">
            <summary>
              The input buffer for this scanner.
            </summary>
        </member>
        <member name="T:QUT.Gppg.IMerge`1">
            <summary>
              Classes implementing this interface must supply a
              method that merges two location objects to return
              a new object of the same type.
              GPPG-generated parsers have the default location
              action equivalent to "@$ = @1.Merge(@N);" where N
              is the right-hand-side length of the production.
            </summary>
            <typeparam name = "TSpan">The Location type</typeparam>
        </member>
        <member name="M:QUT.Gppg.IMerge`1.Merge(`0)">
            <summary>
              Interface method that creates a location object from
              the current and last object.  Typically used to create
              a location object extending from the start of the @1
              object to the end of the @N object.
            </summary>
            <param name = "last">The lexically last object to merge</param>
            <returns>The merged location object</returns>
        </member>
        <member name="T:QUT.Gppg.LexLocation">
            <summary>
              This is the default class that carries location
              information from the scanner to the parser.
              If you don't declare "%YYLTYPE Foo" the parser
              will expect to deal with this type.
            </summary>
        </member>
        <member name="M:QUT.Gppg.LexLocation.#ctor">
            <summary>
              Default no-arg constructor.
            </summary>
        </member>
        <member name="M:QUT.Gppg.LexLocation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructor for text-span with given start and end.
            </summary>
            <param name = "sl">start line</param>
            <param name = "sc">start column</param>
            <param name = "el">end line </param>
            <param name = "ec">end column</param>
        </member>
        <member name="M:QUT.Gppg.LexLocation.Merge(QUT.Gppg.LexLocation)">
            <summary>
              Create a text location which spans from the 
              start of "this" to the end of the argument "last"
            </summary>
            <param name = "last">The last location in the result span</param>
            <returns>The merged span</returns>
        </member>
        <member name="P:QUT.Gppg.LexLocation.StartLine">
            <summary>
              The line at which the text span starts.
            </summary>
        </member>
        <member name="P:QUT.Gppg.LexLocation.StartColumn">
            <summary>
              The column at which the text span starts.
            </summary>
        </member>
        <member name="P:QUT.Gppg.LexLocation.EndLine">
            <summary>
              The line on which the text span ends.
            </summary>
        </member>
        <member name="P:QUT.Gppg.LexLocation.EndColumn">
            <summary>
              The column of the first character
              beyond the end of the text span.
            </summary>
        </member>
        <member name="T:QUT.Gppg.State">
            <summary>
              Encapsulated state for the parser.
              Opaque to users, visible to the tool-generated code.
            </summary>
        </member>
        <member name="M:QUT.Gppg.State.#ctor(System.Int32[],System.Int32[])">
            <summary>
              State transition data for this state. Pairs of elements of the 
              goto array associate symbol ordinals with next state indices.
              The actions array is passed to another constructor.
            </summary>
            <param name = "actions">The action list</param>
            <param name = "goToList">Next state data</param>
        </member>
        <member name="M:QUT.Gppg.State.#ctor(System.Int32[])">
            <summary>
              Action data for this state. Pairs of elements of the 
              action array associate action ordinals with each of
              those symbols that have actions in the current state.
            </summary>
            <param name = "actions">The action array</param>
        </member>
        <member name="M:QUT.Gppg.State.#ctor(System.Int32)">
            <summary>
              Set the default action for this state.
            </summary>
            <param name = "defaultAction">Ordinal of the default action</param>
        </member>
        <member name="M:QUT.Gppg.State.#ctor(System.Int32,System.Int32[])">
            <summary>
              Set the default action and the state transition table.
            </summary>
            <param name = "defaultAction">The default action</param>
            <param name = "goToList">Transitions from this state</param>
        </member>
        <member name="T:QUT.Gppg.Rule">
            <summary>
              Rule representation at runtime.
            </summary>
        </member>
        <member name="M:QUT.Gppg.Rule.#ctor(System.Int32,System.Int32[])">
            <summary>
              Rule constructor.  This holds the ordinal of
              the left hand side symbol, and the list of
              right hand side symbols, in lexical order.
            </summary>
            <param name = "left">The LHS non-terminal</param>
            <param name = "right">The RHS symbols, in lexical order</param>
        </member>
        <member name="T:QUT.Gppg.PushdownPrefixState`1">
            <summary>
              Stack utility for the shift-reduce parser.
              GPPG parsers have three instances:
              (1) The parser state stack, T = QUT.Gppg.State,
              (2) The semantic value stack, T = TValue,
              (3) The location stack, T = TSpan.
            </summary>
            <typeparam name = "T"></typeparam>
        </member>
        <member name="P:QUT.Gppg.PushdownPrefixState`1.Item(System.Int32)">
            <summary>
              Indexer for values of the stack below the top.
            </summary>
            <param name = "index">index of the element, starting from the bottom</param>
            <returns>the selected element</returns>
        </member>
        <member name="P:QUT.Gppg.PushdownPrefixState`1.Depth">
            <summary>
              The current depth of the stack.
            </summary>
        </member>
        <member name="M:Xbim.IO.Parser.StepP21Entity.SetProperty(System.Object)">
            <summary>
              Sets the property at curent parseindex of the curent entity
            </summary>
        </member>
        <member name="P:Xbim.IO.Parser.StepP21Entity.ID">
            <summary>
              The identity number in the STEP P21 file
            </summary>
        </member>
        <member name="P:Xbim.IO.Parser.StepP21Entity.Name">
            <summary>
              The name of the Entity Class
            </summary>
        </member>
        <member name="P:Xbim.IO.Parser.StepP21Entity.Params">
            <summary>
              The unparsed string of parameters
            </summary>
        </member>
        <member name="P:Xbim.IO.Parser.StepP21Entity.IfcInstance">
            <summary>
              The Ifc Model Instance
            </summary>
        </member>
        <member name="T:Xbim.IO.Parser.StringBuffer">
            <summary>
              This class reads characters from a single string as
              required, for example, by Visual Studio language services
            </summary>
        </member>
        <member name="M:Xbim.IO.Parser.BuildBuffer.Mark">
            <summary>
              Marks a conservative lower bound for the buffer,
              allowing space to be reclaimed.  If an application 
              needs to call GetString at arbitrary past locations 
              in the input stream, Mark() is not called.
            </summary>
        </member>
        <member name="M:Xbim.IO.Parser.BuildBuffer.Read">
            <summary>
              Read returns the ordinal number of the next char, or 
              EOF (-1) for an end of stream.  Note that the next
              code point may require *two* calls of Read().
            </summary>
            <returns></returns>
        </member>
        <member name="F:Xbim.IO.XbimCursor.instance">
            <summary>
            The ESENT instance the cursor is opened against.
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimCursor.sesid">
            <summary> 
            The ESENT session the cursor is using.
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimCursor.dbId">
            <summary>
            ID of the opened database.
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimCursor.table">
            <summary>
            ID of the opened data table.
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimCursor.globalsTable">
            <summary>
            Global Table
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimCursor.CreateGlobalsTable(Microsoft.Isam.Esent.Interop.JET_SESID,Microsoft.Isam.Esent.Interop.JET_DBID)">
            <summary>
            Create the globals table.
            </summary>
            <param name="sesid">The session to use.</param>
            <param name="dbid">The database to create the table in.</param>
        </member>
        <member name="M:Xbim.IO.XbimCursor.BeginTransaction">
            <summary>
            Begin a new transaction for this cursor.
            </summary>
            <returns>The new transaction.</returns>
        </member>
        <member name="M:Xbim.IO.XbimCursor.BeginReadOnlyTransaction">
            <summary>
            Begin a new transaction for this cursor. This is the cheapest
            transaction type because it returns a struct and no separate
            commit call has to be made.
            </summary>
            <returns>The new transaction.</returns>
        </member>
        <member name="M:Xbim.IO.XbimCursor.Flush">
            <summary>
            Generate a null database update that we can wrap in a non-lazy transaction.
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.#ctor(Xbim.IO.XbimModel,System.String,Microsoft.Isam.Esent.Interop.OpenDatabaseGrbit)">
            <summary>
            Constructs a table and opens it
            </summary>
            <param name="instance"></param>
            <param name="database"></param>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.SetEntityRowValues(System.Int32,System.Int16,System.Byte[],System.Nullable{System.Boolean})">
            <summary>
            Sets the values of the fields, no update is performed
            </summary>
            <param name="primaryKey">The label of the entity</param>
            <param name="type">The index of the type of the entity</param>
            <param name="data">The property data</param>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.SetEntityIndexRowValues(System.Int16,System.Int32,System.Int32)">
            <summary>
            Sets the values prior to update to write to the entity index table 
            </summary>
            <param name="primaryKey">The entity label</param>
            <param name="type">The Ifc Type ID</param>
            <param name="indexKey">The secondary key to index by</param>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.UpdateEntity(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity)">
            <summary>
            Updates an entity, assumes a valid transaction is running
            </summary>
            <param name="toWrite"></param>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.UpdateEntity(System.Int32,System.Int16,System.Collections.Generic.IEnumerable{System.Int32},System.Byte[],System.Nullable{System.Boolean})">
            <summary>
            Updates an entity, assumes a valid transaction is running
            </summary>
            <param name="currentLabel">Primary key/label</param>
            <param name="typeId">Type identifer</param>
            <param name="indexKeys">Search keys to use specifiy null if no indices</param>
            <param name="data">property data</param>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.AddEntity(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity)">
            <summary>
            Adds an entity, assumes a valid transaction is running
            </summary>
            <param name="toWrite"></param>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.AddEntity(System.Int32,System.Int16,System.Collections.Generic.IEnumerable{System.Int32},System.Byte[],System.Nullable{System.Boolean},System.Nullable{Xbim.IO.XbimLazyDBTransaction})">
            <summary>
            Adds an entity, assumes a valid transaction is running
            </summary>
            <param name="currentLabel">Primary key/label</param>
            <param name="typeId">Type identifer</param>
            <param name="indexKeys">Search keys to use specifiy null if no indices</param>
            <param name="data">property data</param>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.AddEntity(System.Type)">
            <summary>
            Create a new entity of the specified type, the entity will be blank, all properties with default values
            </summary>
            <param name="type">Type of entity to create, this must support IPersistIfcEntity</param>
            <returns>A handle to the entity</returns>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.AddEntity(System.Type,System.Int32)">
            <summary>
            Create a new entity of the specified type, the entity will be blank, all properties with default values
            The entity label will be as specified, an exception will be raised if the label is already in use
            </summary>
            <param name="type">Type of entity to create, this must support IPersistIfcEntity</param>
            <returns>A handle to the entity</returns>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.TrySeekEntityLabel(System.Int32)">
            <summary>
            Returns true if the specified entity label is present in the table, assumes the current index has been set to by primary key (SetPrimaryIndex)
            </summary>
            <param name="key">The entity label to lookup</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.TrySeekEntityType(System.Int16,Xbim.IO.XbimInstanceHandle@)">
            <summary>
            Trys to move to the first entity of the specified type, assumes the current index has been set to order by type (SetOrderByType)
            </summary>
            <param name="typeId"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.TrySeekEntityType(System.Int16,System.Int32,System.Int32)">
            <summary>
            Looks up an entity index to see if the secondary key exists
            </summary>
            <param name="typeId">The Ifc Type</param>
            <param name="key">The secondary key</param>
            <param name="currentLabel">The indexed entity label</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.TrySeekEntityType(System.Int16,Xbim.IO.XbimInstanceHandle@,System.Int32)">
            <summary>
            Trys to move to the first entity of the specified type, assumes the current index has been set to order by type (SetOrderByType)
            Secondary keys are specific to the type and defined as IfcAttributes in the class declaration
            </summary>
            <param name="typeId">the type of entity to look up</param>
            <param name="lookupKey">Secondary key on the search</param>
            <returns>Returns an instance handle to the first or an empty handle if not found</returns>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.GetInstanceHandle">
            <summary>
            returns the instance handle for the object at the current cursor position. Assumes the index has been set to the correct position
            and the current index is SetOrderByType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.GetProperties">
            <summary>
            Gets the property values of the entity from the current record
            </summary>
            <returns>byte array of the property data in binary ifc format</returns>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.RetrieveCount">
            <summary>
            Retrieve the count of entity items in the database from the globals table.
            </summary>
            <returns>The number of items in the database.</returns>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.UpdateCount(System.Int32)">
            <summary>
            Update the count of entity in the globals table. This is done with EscrowUpdate
            so that there won't be any write conflicts.
            </summary>
            <param name="delta">The delta to apply to the count.</param>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.GetIfcType">
            <summary>
            Returns the id of the current ifc type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.GetLabel">
            <summary>
            Returns the current enity label from the curos of the main entity table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.TryMoveNextEntityType(Xbim.IO.XbimInstanceHandle@)">
            <summary>
            For use only on the index table, accesses data from the index only
            </summary>
            <param name="ih"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.TryMoveFirstLabel(System.Int32@)">
            <summary>
            Iterates over the main entity table, access data from the index only
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimEntityCursor.TryMoveNextLabel(System.Int32@)">
            <summary>
            Iterates over the main entity table, access data from the index only
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimGeometryCursor.AddGeometry(System.Int32,XbimGeometry.Interfaces.XbimGeometryType,System.Int16,System.Byte[],System.Byte[],System.Int16,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Adds a geometry record and returns the hash of the geometry data
            </summary>
            <param name="prodLabel"></param>
            <param name="type"></param>
            <param name="ifcType"></param>
            <param name="transform"></param>
            <param name="shapeData"></param>
            <param name="subPart"></param>
            <param name="styleLabel"></param>
            <param name="geometryHash"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimGeometryCursor.RetrieveCount">
            <summary>
            Retrieve the count of geometry items in the database from the globals table.
            </summary>
            <returns>The number of items in the database.</returns>
        </member>
        <member name="M:Xbim.IO.XbimGeometryCursor.UpdateCount(System.Int32)">
            <summary>
            Update the count of geometry entities in the globals table. This is done with EscrowUpdate
            so that there won't be any write conflicts.
            </summary>
            <param name="delta">The delta to apply to the count.</param>
        </member>
        <member name="M:Xbim.IO.XbimGeometryCursor.UpdateReferenceCount(System.Int32,System.Int32)">
            <summary>
            Updates the number of references to a geomentry, a value of 1 indicates 1 reference in addition to one original use.
            A value of 0 means there is only the single use and no other references to this geometry
            </summary>
            <param name="geomLabel"></param>
            <param name="refCount"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimGeometryCursor.GeometryData(XbimGeometry.Interfaces.XbimGeometryType)">
            <summary>
            Returns the records for all geometries of the specified type
            </summary>
            <param name="xbimGeometryType"></param>
            <returns></returns>
        </member>
        <member name="T:Xbim.IO.XbimInstanceHandleMap">
            <summary>
            A class for holding mappings between instances in one model and instances in another model
            </summary>
        </member>
        <member name="T:Xbim.IO.XbimLazyDBTransaction">
            <summary>
            Used for wrapping a Database Lazy Transaction, if commit is not called the Dispose function rolls back the transaction
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimLazyDBTransaction.sesid">
            <summary>
            The session that has the transaction.
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimLazyDBTransaction.inTransaction">
            <summary>
            True if we are in a transaction.
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimLazyDBTransaction.#ctor(Microsoft.Isam.Esent.Interop.JET_SESID)">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.IO.XbimLazyDBTransaction"/> struct.
            </summary>
            <param name="sesid">
            The sesid.
            </param>
        </member>
        <member name="M:Xbim.IO.XbimLazyDBTransaction.Commit">
            <summary>
            Commit the transaction.
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimLazyDBTransaction.Dispose">
            <summary>
            Rollback the transaction if not already committed.
            </summary>
        </member>
        <member name="T:Xbim.IO.XbimModel">
            <summary>
            General Model class for memory based model suport
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimModel.AddGroups">
            <summary>
            based on the XML rule definition, this creates group objects to group instances together
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimModel.ReloadModelFactors">
            <summary>
            Reloads the model factors if any units or precisions are changed
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimModel.GetGeometryTable">
            <summary>
            Starts a transaction to allow bulk updates on the geometry table, FreeGeometry Table should be called when no longer required
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.FreeTable(Xbim.IO.XbimGeometryCursor)">
            <summary>
            Returns the table to the cache for reuse
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Xbim.IO.XbimModel.FreeTable(Xbim.IO.XbimEntityCursor)">
            <summary>
            Returns the table to the cache for reuse
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Xbim.IO.XbimModel.FreeTable(Xbim.IO.XbimShapeGeometryCursor)">
            <summary>
            Returns the table to the cache for reuse
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Xbim.IO.XbimModel.FreeTable(Xbim.IO.XbimShapeInstanceCursor)">
            <summary>
            Returns the table to the cache for reuse
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Xbim.IO.XbimModel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs a set of actions on a collection of entities inside a single read only transaction
            This improves database  performance for retrieving and accessing complex and deep objects
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="body"></param>
        </member>
        <member name="M:Xbim.IO.XbimModel.Delete(Xbim.XbimExtensions.Interfaces.IPersistIfcEntity)">
            <summary>
            Registers an entity for deletion
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.GetInstanceVolatile(System.Int32)">
            <summary>
            Returns an instance from the Model with the corresponding label but does not keep a cache of it
            This is a dangerous call as duplicate instances of the same object could happen
            Ony use when interating over the whole database for export etc
            The properties of the object are also loaded to improve performance
            If the instance is in the cache it is returned
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.CreateFrom(System.String,System.String,Xbim.XbimExtensions.Interfaces.ReportProgressDelegate,System.Boolean,System.Boolean)">
            <summary>
            Creates a new Model and populates with instances from the specified file, Ifc, IfcXML, IfcZip and Xbim are all supported.
            </summary>
            <param name="importFrom">Name of the file containing the instances to import</param>
            /// <param name="xbimDbName">Name of the xbim file that will be created. 
            If null the contents are loaded into memory and are not persistent
            </param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.CreateTemporaryModel">
            <summary>
            Creates an empty model using a temporary filename, the model will be deleted on close, unless SaveAs is called
            It will be returned open for read write operations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.CreateModel(System.String,Xbim.XbimExtensions.XbimDBAccess)">
            <summary>
             Creates and opens a new Xbim Database
            </summary>
            <param name="dbFileName">Name of the Xbim file</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.Validate(System.IO.TextWriter,Xbim.XbimExtensions.ValidationFlags)">
            <summary>
            Validates all entities in the model
            </summary>
            <param name="tw"></param>
            <param name="validateLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.Close">
            <summary>
            Closes the current model and releases all resources and instances
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimModel.CacheStart">
            <summary>
            Begins a cache of all data read from the model, improves performance where data is read many times
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimModel.CacheClear">
            <summary>
            Clears all read data in the cache
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimModel.CacheStop">
            <summary>
            Stops further caching of data and clears the current cache
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimModel.Open(System.String,Xbim.XbimExtensions.XbimDBAccess,Xbim.XbimExtensions.Interfaces.ReportProgressDelegate)">
            <summary>
            Opens an Xbim model only, to open Ifc, IfcZip and IfcXML files use the CreatFrom method
            </summary>
            <param name="fileName"></param>
            <param name="accessMode"></param>
            <param name="progDelegate"></param>
            <returns>True if successful</returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.CreateInstance(System.String,System.Nullable{System.Int64})">
            <summary>
              Creates an Ifc Persistent Instance from an entity name string and label, this is NOT an undoable operation
            </summary>
            <param name = "ifcEntityName">Ifc Entity Name i.e. IFCDOOR, IFCWALL, IFCWINDOW etc. Name must be in uppercase</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.CreateInstance(System.Type,System.Nullable{System.Int64})">
            <summary>
            Creates an Ifc Persistent Instance from an entity type and label, this is NOT an undoable operation
            </summary>
            <param name="ifcType"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.GetGeometryData(System.Int32,XbimGeometry.Interfaces.XbimGeometryType)">
            <summary>
            Returns all the geometries for the geometry type
            Typically bounding box returns a single object, triangulated mesh mes may return multiple geometry meshes
            where an object is made of multiple materials
            </summary>
            <param name="productLabel"></param>
            <param name="geomType"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.InsertCopy``1(``0,Xbim.IO.XbimReadWriteTransaction,System.Boolean)">
            <summary>
            Inserts a deep copy of the toCopy object into this model
            All property values are copied to the maximum depth
            Objects are not duplicated, if repeated copies are to be performed use the version with the 
            mapping argument to ensure objects are not duplicated
            </summary>
            <param name="toCopy"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.InsertCopy``1(``0,Xbim.IO.XbimInstanceHandleMap,Xbim.IO.XbimReadWriteTransaction,System.Boolean)">
            <summary>
            Inserts a deep copy of the toCopy object into this model
            All property values are copied to the maximum depth
            Inverse properties are not copied
            </summary>
            <param name="toCopy">Instance to copy</param>
            <param name="mappings">Supply a dictionary of mappings if repeat copy insertions are to be made</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.AddModelReference(System.String,System.String,System.String)">
            <summary>
            Adds a model as a reference or federated model, do not call inside a transaction
            </summary>
            <param name="refModelPath"></param>
            <param name="organisationName"></param>
            <param name="organisationRole"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.AddModelReference(System.String,Xbim.XbimExtensions.SelectTypes.IfcActorSelect)">
            <summary>
            adds a model as a reference model can be called inside a transaction
            </summary>
            <param name="refModelPath">the file path of the xbim model to reference, this must be an xbim file</param>
            <param name="owner">the actor who supplied the model</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimModel.LoadReferenceModels(System.Boolean)">
            <summary>
            All reference models are opened in a readonly mode.
            Their children reference models is invoked iteratively.
            
            Loading referenced models defaults to avoiding Exception on file not found; in this way the federated model can still be opened and the error rectified.
            </summary>
            <param name="throwReferenceModelExceptions"></param>
        </member>
        <member name="M:Xbim.IO.XbimModel.EnsureGeometryTables">
            <summary>
            Invoke the function before meshing to ensure database structure is available
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.XbimModel.UserDefinedId">
            <summary>
            An identifier that an application can use to identify this model uniquely
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimModel.ModelFactors">
            <summary>
            Model wide factors, precision etc
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimModel.CodePageOverride">
            <summary>
            Some applications do not comply with the standard and used the Windows codepage for text. This property gives the possibility to override the character encoding when reading ifc.
            default value = -1 - by standart http://www.buildingsmart-tech.org/implementation/get-started/string-encoding/string-encoding-decoding-summary
            </summary>
            <example>
            model.CodePageOverride = Encoding.Default.WindowsCodePage;
            </example>
        </member>
        <member name="P:Xbim.IO.XbimModel.Instances">
            <summary>
            Returns a collection of all instances in the model and all federated instances 
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimModel.GeometriesCount">
            <summary>
            Returns the total number of Geometry objects in the model
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimModel.IfcProducts">
            <summary>
            Returns all products in the model, including federated products
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimModel.GeometrySupportLevel">
            <summary>
            Returns the level of geometry supported in the model
            0 = No geometry has been compiled in the model
            1 = Triangulated Mesh only
            2 = Polygonal  geometry meshes supporting maps
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimModel.IsFederation">
            <summary>
            Returns true if the model contains reference models or the model has extension xBIMf
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimModel.AllInstancesHandles">
            <summary>
            Returns an enumerable of the handles to all entities in the model
            Note this includes entities that are in any federated models
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimModel.InstanceHandles">
            <summary>
            Returns an enumerable of the handles to only the entities in this model
            Note this do NOT include entities that are in any federated models
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimModel.AllModels">
            <summary>
            Federated models can be nested.
            Since children models do not have a method for pointing to the parent management of their 
            uniqueness must be achieved top down by the topmost one. After all child models are loaded.
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimModel.AutoAddOwnerHistory">
            <summary>
            If true OwnerHistory properties are added modified when an object is added or modified, by default this is on, turn off with care as it can lead to models that do not comply with the schema
            The main use is for copy data between models where the owner history needs to be preserved
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimParserState.InList">
            <summary>
            Returns true if the parser is working through a list of items
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimReadOnlyDBTransaction.sesid">
            <summary>
            The session that has the transaction.
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimReadOnlyDBTransaction.#ctor(Microsoft.Isam.Esent.Interop.JET_SESID)">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.IO.XbimReadOnlyDBTransaction"/> struct.
            </summary>
            <param name="sesid">
            The sesid.
            </param>
        </member>
        <member name="M:Xbim.IO.XbimReadOnlyDBTransaction.Dispose">
            <summary>
            Rollback the transaction if not already committed.
            </summary>
        </member>
        <member name="T:Xbim.IO.XbimReadTransaction">
            <summary>
            A transaction allowing read only operations on a model
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimReadTransaction.disposed">
            <summary>
            to detect redundant calls
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimReadTransaction.inTransaction">
            <summary>
            True if we are in a transaction.
            </summary>
        </member>
        <member name="T:Xbim.IO.XbimReadWriteTransaction">
            <summary>
            A transaction allowing read and write operations on a model
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimReadWriteTransaction.Pulse">
            <summary>
            Increments the pulse count for the transaction, if the pulse count exceed the Transaction batch size the transaction is committed and restarted
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.XbimReadWriteTransaction.TransactionBatchSize">
            <summary>
            The maximum number of pulse actions before a transaction is automatically commited, default is 100 
            </summary>
        </member>
        <member name="T:Xbim.IO.XbimReferencedModel">
            <summary>
            A model that is referenced by another XbimModel
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimReferencedModel.Identifier">
            <summary>
            Returns the identifier for this reference within the scope of the referencing model
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryHandle._contextHandle">
            <summary>
            The 3D model context that contains this shape geometry
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryHandle._shapeLabel">
            <summary>
            The unique label of this shape geometry
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryHandle._referenceCount">
            <summary>
            The number of references to this shape geoemetry
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometryHandle.Context">
            <summary>
            The 3D model context that contains this shape geometry
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometryHandle.ShapeLabel">
            <summary>
            The unique label of this shape geometry
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometryHandle.ReferenceCount">
            <summary>
            The number of references to this shape
            </summary>
        </member>
        <member name="T:Xbim.IO.XbimShapeGeometry">
            <summary>
            A basic shape geoemetry, note this is independent of placement and not specific to any product
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometry._shapeLabel">
            <summary>
            The unique label of this shape geometry
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometry._ifcShapeLabel">
            <summary>
            The label of the IFC object that defines this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometry._geometryHash">
            <summary>
             Hash of the shape Geometry, based on the IFC representation, this is not unique
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometry._referenceCount">
            <summary>
            The number of references to this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometry._format">
            <summary>
            The format in which the shape data is represented, i.e. triangular mesh, polygon, opencascade
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometry._boundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometry._shapeData">
            <summary>
            The geometry data defining the shape
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometry.ShapeLabel">
            <summary>
            The unique label of this shape geometry
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometry.IfcShapeLabel">
            <summary>
            The label of the IFC object that defines this shape
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometry.GeometryHash">
            <summary>
             Hash of the shape Geometry, based on the IFC representation, this is not unique
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometry.Cost">
            <summary>
            The cost in bytes of this shape
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometry.ReferenceCount">
            <summary>
            The number of references to this shape
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometry.LOD">
            <summary>
            The level of detail or development that the shape is suited for
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometry.Format">
            <summary>
            The format in which the shape data is represented, i.e. triangular mesh, polygon, opencascade
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometry.Xbim#IO#IXbimShapeGeometryData#Format">
            <summary>
            The format in which the shape data is represented, i.e. triangular mesh, polygon, opencascade as a byte
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometry.BoundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometry.Xbim#IO#IXbimShapeGeometryData#BoundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometry.ShapeData">
            <summary>
            The geometry data defining the shape
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometry.Xbim#IO#IXbimShapeGeometryData#ShapeDataCompressed">
            <summary>
            The geometry data defining the shape, this is a compressed representation of the data
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeGeometry.IsValid">
            <summary>
            Returns true if the geometry is valid
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor.geometryTablePrimaryIndex">
            <summary>
            Index on the unique label
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor.geometryTableHashIndex">
            <summary>
            index on the geeometric hash
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor.geometryTableReferenceIndex">
            <summary>
            Index on the reference count
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor.colNameShapeLabel">
            <summary>
            The unique label of this shape instance
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor.colNameIfcShapeLabel">
            <summary>
            The label of the IFC object that defines this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor.colNameShapeData">
            <summary>
            The gemetry data defining the shape
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor.colNameGeometryHash">
            <summary>
             Hash of the shape Geometry, based on the IFC representation, this is not unique
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor.colNameCost">
            <summary>
            The cost in bytes of this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor.colNameReferenceCount">
            <summary>
            The number of references to this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor.colNameLOD">
            <summary>
            The level of detail or development that the shape is suited for
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor.colNameBoundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor.colNameFormat">
            <summary>
            The format in which the shape data is represented, i.e. triangular mesh, polygon, opencascade
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor._colValShapeLabel">
            <summary>
            The unique label of this shape instance
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor._colValIfcShapeLabel">
            <summary>
            The label of the IFC object that defines this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor._colValGeometryHash">
            <summary>
             Hash of the shape Geometry, based on the IFC representation, this is not unique
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor._colValCost">
            <summary>
            The total cost in bytes of this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor._colValReferenceCount">
            <summary>
            The number of references to this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor._colValLOD">
            <summary>
            The level of detail or development that the shape is suited for
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor._colValFormat">
            <summary>
            The format in which the shape data is represented, i.e. triangular mesh, polygon, opencascade
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor._colValBoundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor._colValShapeData">
            <summary>
            The gemetry data defining the shape
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor.GeometryTableName">
            <summary>
            shape geometry table name
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeGeometryCursor._colValues">
            <summary>
            Holds all the table row values
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimShapeGeometryCursor.RetrieveCount">
            <summary>
            Retrieve the count of geometry items in the database from the globals table.
            </summary>
            <returns>The number of items in the database.</returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeGeometryCursor.UpdateCount(System.Int32)">
            <summary>
            Update the count of geometry entities in the globals table. This is done with EscrowUpdate
            so that there won't be any write conflicts.
            </summary>
            <param name="delta">The delta to apply to the count.</param>
        </member>
        <member name="M:Xbim.IO.XbimShapeGeometryCursor.TryMoveFirstShapeGeometry(Xbim.IO.IXbimShapeGeometryData@)">
            <summary>
            Seeks and returns the first shape geometry
            </summary>
            <param name="sg"></param>
        </member>
        <member name="M:Xbim.IO.XbimShapeGeometryCursor.TryMoveNextShapeGeometry(Xbim.IO.IXbimShapeGeometryData@)">
            <summary>
            Returns the next Shape geometry after a move or a seek call
            </summary>
            <param name="sg"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeGeometryCursor.TryGetShapeGeometry(System.Int32,Xbim.IO.IXbimShapeGeometryData@)">
            <summary>
            Returns the shape geometry for the specified label if it exists
            </summary>
            <param name="shapeGeometryLabel"></param>
            <param name="sg"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeGeometryCursor.GetReferenceCount(System.Int32)">
            <summary>
            fast retrieval of the reference counf for this geometry
            </summary>
            <param name="shapeGeometryLabel"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeGeometryCursor.TryMoveFirstReferenceCounter">
            <summary>
            Moves to the first Shape Geometry and sets the index to the reference counter index
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeGeometryCursor.TryMoveNextReferenceCounter">
            <summary> Moves to the next shape geometry assumes TryMoveFirstReferenceCounter has been called
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeGeometryCursor.GetReferenceCount">
            <summary>
            returns the reference count for the current record, assume that TryMoveFirstReferenceCounter has been called
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeGeometryCursor.GetCost">
            <summary>
            returns the cost for the current record, assume that TryMoveFirstReferenceCounter has been called
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeGeometryCursor.GetShapeGeometryLabel">
            <summary>
            returns the geometry label for the current record, assume that the current index has been set to primary
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.XbimShapeInstanceStyleGrouping.System#Linq#IGrouping{System#Int32@Xbim#IO#XbimShapeInstance}#Key">
            <summary>
            This is the lable of the surface style
            </summary>
        </member>
        <member name="T:Xbim.IO.XbimShapeInstance">
            <summary>
            A shape with a shapegeometry that has been placed as a specific instance in the scene
            i.e. it has had all maps performed and it has been transformed to the correct location
            This represents a geometry mesh, with a texture that is placed in world coordinate systems
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstance._instanceLabel">
            <summary>
            The unique label of this shape instance
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstance._ifcTypeId">
            <summary>
            The IFC type of the product this instance represents
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstance._ifcProductLabel">
            <summary>
            The label of the IFC Product object that  this instance fully or partly defines
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstance._styleLabel">
            <summary>
            The style that this shape is presented in when it overrides the shape style
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstance._shapeLabel">
            <summary>
            The id of the shape  that this is an instance of
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstance._representationContext">
            <summary>
            The label of the IFC representation context of this instance
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstance._representationType">
            <summary>
            What type of representation, typically this is how the shape has been generated, i.e. openings have been applied or not applied
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstance._transformation">
            <summary>
            The transformation to be applied to shape to place it in the world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstance._boundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeInstance.BoundingBox">
            <summary>
            The bounding box of this instance, does not require tranformation to place in world coordinates
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeInstance.Xbim#IO#IXbimShapeInstanceData#BoundingBox">
            <summary>
            The bounding box of this instance, does not require tranformation to place in world coordinates
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimShapeInstance.HasStyle">
            <summary>
            returns true if the shape instance has a defined style
            </summary>
        </member>
        <member name="T:Xbim.IO.XbimShapeInstanceCursor">
            <summary>
            Provides a table of instantiations of shapes at specific tranformations
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.instanceTablePrimaryIndex">
            <summary>
            Index on the context, style, ifc type then instance label
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.productTypeIndex">
            <summary>
            Index on theifc type id
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.productIndex">
            <summary>
            index on the  product label
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.geometryShapeIndex">
            <summary>
            Index on the shape of the object
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.colNameInstanceLabel">
            <summary>
            The unique label of this shape instance
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.colNameIfcTypeId">
            <summary>
            The type ID of the IFC Product object that defines this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.colNameIfcProductLabel">
            <summary>
            The label of the IFC Product object that defines this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.colNameStyleLabel">
            <summary>
            The style that this shape is presented in when it overrides the shape style
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.colNameShapeLabel">
            <summary>
            The id of the shape  that this is an instance of
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.colNameRepresentationContext">
            <summary>
            The label of the IFC representation context of this instance
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.colNameRepType">
            <summary>
            What type of representation, typically this is how the shape has been generated, i.e. openings have been applied or not applied
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.colNameTransformation">
            <summary>
            The transformation to be applied to shape to place it in the world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.colNameBoundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor._colValInstanceLabel">
            <summary>
            The unique label of this shape instance
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor._colValIfcTypeId">
            <summary>
            The IFC type of the product this instance represents
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor._colValIfcProductLabel">
            <summary>
            The label of the IFC Product object that  this instance fully or partly defines
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor._colValStyleLabel">
            <summary>
            The style that this shape is presented in when it overrides the shape style
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor._colValShapeLabel">
            <summary>
            The id of the shape  that this is an instance of
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor._colValRepresentationContext">
            <summary>
            The label of the IFC representation context of this instance
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor._colValRepType">
            <summary>
            What type of representation, typically this is how the shape has been generated, i.e. openings have been applied or not applied
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor._colValTransformation">
            <summary>
            The transformation to be applied to shape to place it in the world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor._colValBoundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor.InstanceTableName">
            <summary>
            shape geometry table name
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimShapeInstanceCursor._colValues">
            <summary>
            Holds all the table row values
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimShapeInstanceCursor.RetrieveCount">
            <summary>
            Retrieve the count of geometry items in the database from the globals table.
            </summary>
            <returns>The number of items in the database.</returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeInstanceCursor.UpdateCount(System.Int32)">
            <summary>
            Update the count of geometry entities in the globals table. This is done with EscrowUpdate
            so that there won't be any write conflicts.
            </summary>
            <param name="delta">The delta to apply to the count.</param>
        </member>
        <member name="M:Xbim.IO.XbimShapeInstanceCursor.AddInstance(System.Int32,System.Int32,System.Int32,System.Int16,System.Int32,Xbim.Common.Geometry.XbimGeometryRepresentationType,System.Byte[])">
            <summary>
            Adds a shape instance to the database table
            </summary>
            <param name="ctxtId"></param>
            <param name="shapeLabel"></param>
            <param name="typeId"></param>
            <param name="productLabel"></param>
            <param name="repType"></param>
            <param name="bounds"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Xbim.IO.XbimShapeInstanceCursor.TrySeekShapeInstance(System.Int32,Xbim.IO.IXbimShapeInstanceData@)">
            <summary>
            xbimShapeInstanceData will contain the first shape instance in the specified context
            </summary>
            <param name="context"></param>
            <param name="si"></param>
            <param name="retrieveAll">if false only retrieve the key index data for speed, if true all data is returned</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeInstanceCursor.TryMoveNextShapeInstance(Xbim.IO.IXbimShapeInstanceData@)">
            <summary>
            Moves the cursor to the next shape instance that meets the criteria of the previous TrySeek call
            </summary>
            <param name="si"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeInstanceCursor.TrySeekShapeInstanceOfProduct(System.Int32,Xbim.IO.IXbimShapeInstanceData@)">
            <summary>
            xbimShapeInstanceData will contain the first shape instance of the specified product label
            </summary>
            <param name="product"></param>
            <param name="si"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeInstanceCursor.TrySeekShapeInstanceOfProduct(System.Int32)">
            <summary>
            Return whether the product has any instances
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeInstanceCursor.TrySeekShapeInstanceOfGeometry(System.Int32,Xbim.IO.IXbimShapeInstanceData@)">
            <summary>
            xbimShapeInstanceData will contain the first shape instance of the specified product label
            </summary>
            <param name="context"></param>
            <param name="si"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeInstanceCursor.TryMoveFirstSurfaceStyle(System.Int32,System.Int32@,System.Int16@)">
            <summary>
            Returns the first surface style in the specified context, -1 if no styles exists
            </summary>
            <param name="p"></param>
            <param name="surfaceStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeInstanceCursor.TryMoveNextSurfaceStyle(System.Int32@,System.Int16@)">
            <summary>
            Returns the next surface style in the specified context, assumes TryMoveFirstSurfaceStyle was the last call on this cursor
            </summary>
            <param name="surfaceStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeInstanceCursor.SkipSurfaceStyes(System.Int32)">
            <summary>
            Skips all instances of skipstlye and returns in the next SurfaceStyle 
            </summary>
            <param name="skipStyle"></param>
            <param name="surfaceStyle"></param>
        </member>
        <member name="M:Xbim.IO.XbimShapeInstanceCursor.TryMoveFirstProductType(System.Int32,System.Int16@)">
            <summary>
            Returns the first product type in the specified context
            </summary>
            <param name="p"></param>
            <param name="surfaceStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.XbimShapeInstanceCursor.TryMoveNextProductType(System.Int16@)">
            <summary>
            Returns the next product type in the specified context, assumes TryMoveFirstSurfaceStyle was the last call on this cursor
            </summary>
            <param name="surfaceStyle"></param>
            <returns></returns>
        </member>
        <member name="T:Xbim.IO.XbimSurfaceStyle">
            <summary>
            Represents a material used to render a surface of a geometry
            </summary>
        </member>
        <member name="F:Xbim.IO.XbimSurfaceStyle.TagRenderMaterial">
            <summary>
            Holds the material used by the graphics engine to render the surface style
            Set to a value to suite  specific needs of the graphics environment being used
            </summary>
        </member>
        <member name="M:Xbim.IO.XbimSurfaceStyleMap.GeometryHandlesForStyle(Xbim.IO.XbimSurfaceStyle)">
            <summary>
            Returns all the geometry handles for a specified style, use the Styles property for a valid style
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimSurfaceStyleMap.Styles">
            <summary>
            Returns all the  unique style in the map
            </summary>
        </member>
        <member name="P:Xbim.IO.XbimSurfaceStyleMap.GeometryHandles">
            <summary>
            Returns an enumerable of all handles in the map
            </summary>
        </member>
    </members>
</doc>
